// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  refNumber        String   @unique
  status           String   @default("pending")
  address          String
  dogName          String
  notes            String?
  date             DateTime
  time             String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Walk             Walk[]
}

model User {
  id            String @id @default(uuid())
  name          String
  email         String @unique
  password      String
  phone         String
  streetAddress String
  suburb        String
  province      String
  city          String

  emailVerifiedDate       DateTime?
  emailVerified           Boolean   @default(false)
  isActive                Boolean   @default(true)
  isVerified              Boolean   @default(false)
  verificationCode        String?
  verificationCodeExpires DateTime?
  image                   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]
  Walks    Walk[]
  Dogs     Dog[]
}

model Waitlist {
  id        String   @id @default(uuid())
  email     String   @unique
  suburb    String
  province  String
  city      String
  createdAt DateTime @default(now())
}

//Walker Models
model Walker {
  id       String @id @default(cuid())
  name     String
  lastname String
  email    String @unique
  address  String
  phone    String
  password String
  idNumber String
  idCopy   String

  verificationToken String
  verified          Boolean

  walkerId     String       @unique //short unique walker id for sign in
  walkerImage  String?
  rating       Int?
  totalWalks   Int?
  availability String?
  status       WalkerStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Walk      Walk[]

  @@index([email])
  @@index([walkerId])
  @@index([status])
}

model Walk {
  id        String     @id @default(cuid())
  walkNo    String     @unique
  userId    String
  walkerId  String
  dogId     String
  bookingId String     @unique
  status    WalkStatus @default(PENDING)

  type          WalkType
  price         Decimal  @db.Decimal(10, 2)
  startTime     DateTime
  endTime       DateTime
  duration      Int?
  pickupAddress String
  notes         String?

  rating Int?
  review String?

  promo Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  walker  Walker  @relation(fields: [walkerId], references: [id])
  dog     Dog     @relation(fields: [dogId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  @@index([userId])
  @@index([walkerId])
  @@index([status])
  @@index([startTime])
}

model Dog {
  id      String  @id @default(cuid())
  name    String
  age     Int?
  breed   String
  size    DogSize
  image   String?
  ownerId String

  owner User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Walks Walk[]
}

enum DogSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum WalkerStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum WalkStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WalkType {
  SHORT
  MEDIUM
  LONG
  CUSTOM
}

enum BookingStatus {
  PENDING // Booking created, payment pending
  CONFIRMED // Payment received, awaiting walker assignment
  WALKER_ASSIGNED // Walker assigned, awaiting walk
  IN_PROGRESS // Walk is happening
  COMPLETED // Walk completed
  CANCELLED // Booking cancelled
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid()) // primary key for stable deletes
  identifier String // e.g. user email
  token      String
  expires    DateTime

  @@index([identifier]) // for quick lookup
}
